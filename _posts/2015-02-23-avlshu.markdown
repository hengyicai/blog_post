---
layout: post
title:  "AVL树"
date: 2015-02-23 15:32:02 +0800
comments: true
categories: 算法相关
tags: [二叉树, 二叉平衡树, AVL, 数据结构]
keywords: 二叉树, 二叉平衡树, AVL, 数据结构
description: 二叉平衡树的C语言实现以及算法分析
---

在[二叉查找树](http://hengyicai.github.io/blog/2015/02/22/er-cha-cha-zhao-shu/)的那一节中，我们在删除的具有两个儿子的节点的时候，采用的是用该节点右子树中最小的节点来代替它，然后再删除那个最小的节点，这种做法虽然保证了树的二叉查找树性质，但是长久以来便会使得这棵树变得极其的不平衡，因为我们总是减少右边的节点，结果就像下图一样

<!--more-->

{% img center /images/no_eq.png 480 230 %}

或许在**右子树中选择最小**和**左子树中选择最大**轮换地使用可以稍微解决一下这种不平衡，但是在这里我们介绍一种**AVL树**来保证二叉查找树的平衡，AVL树得名于它的发明者G.M. Adelson-Velsky和E.M. Landis，他们在1962年的论文《An algorithm for the organization of information》中发表了它。这种数据结构算是最老的一种平衡树了，不过我们还是很有必要了解它。

## 基本概念

我们还是先搞清楚一些基本的概念。首先，AVL 树是带有平衡条件的二叉查找树，显然，二叉查找树应该满足的条件它肯定也满足，但是它还保持了**平衡条件**,这个平衡条件可以保证树的深度是$O(\log{N})$，不至于出现像上图那样的情况，最简单的想法可能是要求根节点的左右子树具有一样的高度，但是从下图我们可以知道，仅仅保证这个条件是不够的。

{% img center /images/Bad_AVL.png 300 300 %}

另一种平衡条件是要求每个节点都必须要有相同高度的左子树和右子树，假定空子树的高度为**-1**，那么要想严格满足这个条件，一棵树的节点个数则必须是$2^{k} - 1$，虽然这种条件保证了树的深度小，但是这个条件过于严格，难以使用，所以需要放宽条件，**AVL**树的平衡条件便是比较合适的条件，它要求每个节点的左子树和右子树的高度最多差**1**，空树的高度依然定义为**-1**，如下图，左边的树是**AVL**树，而右边的树不是。

{% img center /images/comp_AVL.png %}

这种平衡树的目的在于保证树的高度为 $O(\log{N})$,这样一来，我们在执行诸如查找，插入，删除的时候就可以有$O(\log{N)}$的时间复杂度，在树的节点数量达到一定级别的时候，这种优势会显现出来，在本文的最后会有说明。

树的高度我们定义为最深的叶子节点的深度，某一个节点的深度等于这个节点到根节点的唯一路径长度，如下图，这棵树的高度为**3**。

{% img center /images/simple_tree.bmp %}

概念清楚之后就是在其上的各种操作了，查找的操作和[二叉搜索树](http://hengyicai.github.io/blog/2015/02/22/er-cha-cha-zhao-shu/)相同，下面重点说明一下插入和删除的细节和**C**语言实现，先贴上头文件定义。

```C
#ifndef _AvlTree_H

struct AvlNode;
typedef struct AvlNode *Position;
typedef struct AvlNode *AvlTree;
typedef int ElementType;

AvlTree MakeEmpty( AvlTree );
Position Find( ElementType X, AvlTree T );
Position FindMin( AvlTree T );
Position FindMax( AvlTree T );
AvlTree Insert( ElementType X, AvlTree T );
AvlTree Delete( ElementType X, AvlTree T );
ElementType Retrieve( Position P );

#endif

```

## 算法实现

思路其实是很简单的，[二叉搜索树](http://hengyicai.github.io/blog/2015/02/22/er-cha-cha-zhao-shu/)的查找，删除，插入都比较方便，但是我们想在这个基础上还要保持树的平衡，所以插入和删除的时候要比原先的[二叉搜索树](http://hengyicai.github.io/blog/2015/02/22/er-cha-cha-zhao-shu/)多做些事情，就是**每次插入新的节点或删除某一个节点之后，要对树进行一定的调整，使整棵树依然是一棵**AVL**树**。

为了知晓树是否平衡，我们在树的节点定义中维护一个**高度**信息，有的维护一个**平衡因子**，本质是一样的，如下是节点的定义

```C
struct AvlNode
{
	ElementType Element;
	AvlTree Left;
	AvlTree Right;
	int Height;
};
```

下面我们考虑一下不平衡的情况都有哪些，假设下面这个节点一开始是平衡的(该图可以认为是某棵树的局部)

{% img center /images/four_AVL.bmp %}

**LL**,**LR**,**RL**,**RR** 是四棵子树，每棵子树可能有若干节点，也可能是空树，总之，这个时候这些节点是平衡的，即任意一个节点的左右子树的高度差不超过**1**。然后我们开始插入节点，那么新节点可能被插入到四棵子树的某一棵，然后由于新节点的插入，不平衡产生了，如下图

{% img center /images/AVL_situ_1.bmp %}

在这幅图中节点**2**相当于子树 **LL**，其它的三棵子树在这里为空，图中节点**5**由于在其左子树中插入了新的节点**1**使得它不再平衡，且它是沿着 **活跃节点** **2**到根节点的路径上第一个不平衡的，**活跃节点**我们定义为插入的新节点的父节点，这个**第一个不平衡**的节点比较重要，我们把它叫做 **节点$\alpha$**，很容易理解，在插入之后，只有 **活跃节点** 到 **根节点** 的路径上的节点的高度可能会发生变化，而 **节点$\alpha$** 是这条路径上最深的不平衡的节点,我们就是要在这里做调整，来使得整棵树恢复平衡。

因为任意节点最多有两个孩子，因此，高度不平衡的时候，**节点$\alpha$** 的两棵子树高度差为**2**，不平衡的情况出现在下面四种情况之一

-  对 **节点$\alpha$** 的左儿子的左子树进行一次插入
-  对 **节点$\alpha$** 的左儿子的右子树进行一次插入
-  对 **节点$\alpha$** 的右儿子的右子树进行一次插入
-  对 **节点$\alpha$** 的右儿子的左子树进行一次插入

仔细想一下就会发现，不平衡的出现不外乎这四种情况，而我们只要防微杜渐，每次插入之后只要发现不平衡了，赶快调整，那么整棵树就会一直保持平衡，删除也是一样。

### 插入

现在我们对一棵**AVL树**进行插入的操作，然后看一下在导致不平衡的时候该如何调整。上文说到，不平衡的情况的出现不外乎那四种情况，我们把这四种情况分别叫做**LL**，**LR**，**RR**，**RL**，其实只有两种情况，因为 **LL** 和 **RR** 镜像对称，**LR** 和 **RL** 镜像对称，但是实现的话还是要写四种，下图显示了这四种情况。

{% img center /images/AVL_4.bmp 772 450 %}

对于这两种情况(真正不一样的只有两种)，分别采取**单旋转**和**双旋转**可以使树重新恢复平衡，相对于红黑树来说，这里的这两个操作还是非常简单的。

#### 单旋转

单旋转是针对 **LL** 和 **RR** 的，我们考虑如下的这种 **LL** 情况

{% img center /images/AVL_LL.bmp %}

这种情况下的 **节点$\alpha$** 是 **节点K2**，这种情况下很明显左边节点太多了，本来是 **节点K2** 做为根节点的，现在我们让 **节点K1** 作为根节点，就好像现在掂起来 **节点K1**，使劲抖一抖，然后就变成了下面这棵恢复平衡的树。

{% img center /images/AVL_LL_REC.bmp %}

除了抖一抖，恢复平衡以外，我们还要调整一下指针的指向，保证二叉搜索树的特性，具体来说就是

-  把 **节点K1** 的右子树变成 **节点K2** 的左子树。
-  把 **节点K2** 变成 **节点K1** 的右子树

具体过程如下

```C
/*******************************************************
 * 
 *	 		  k2					k1
 *	 	    	 /  \				       /  \
 *		    	/    \				      /    \
 *		       K1    k3		                     X	    K2
 *		      /  \         --------->	            /	   /  \	
 *	             /    \		                   /	  /    \
 *                  X      Y				  Z      Y	K3
 *	           /
 *	          /
 *   		 Z
 * 
 * 此函数对如图所示情况进行 左左的单旋转 接收需要旋转的节点 K2 ，
 * 完成旋转后更新对应的高度值 Height ,返回新的根 (此示例中是 K1)
 *
 *******************************************************/
static Position SingleRotateWithLeft( Position K2 )
{
	Position K1;
	
	/**旋转**/
	K1 = K2->Left;
	K2->Left = K1->Right;
	K1->Right = K2;

	/**调整高度**/
	K2->Height = Max( Height( K2->Left ),Height( K2->Right ) ) + 1;
	K1->Height = Max( Height( K1->Left ),K2->Height ) + 1;

	return K1;
}
```

右右情况下的处理类似，实现如下

```C
/**右单旋转和左单旋转相似的处理**/
/**********************************
 *				
 *		 K2					K1
 *	    	/  \			   	       /  \
 *	       /    \			  	      /    \
 *	      K3    K1			  	     K2	    X
 *           	   /  \		          	    /  \     \	
 *	          /    \	  --------->	   /    \     \
 *	         Y      X	               	  K3	 Y     Z
 *		         \
 *			  \
 *		           Z
 *
 * *******************************/
static Position SingleRotateWithRight( Position K2 )
{
	Position K1;

	/**旋转**/
	K1 = K2->Right;
	K2->Right = K1->Left;
	K1->Left = K2;

	/**调整高度**/
	K2->Height = Max( Height( K2->Right ),Height( K2->Left ) ) + 1;
	K1->Height = Max( Height(K1->Right ),K2->Height) + 1;

	return K1;
}
```

以上是单旋转的情况，接下来是稍微复杂一点的双旋转情况。

#### 双旋转

双旋转主要来解决 **LR** 和 **RL** 所产生的不平衡，这种不平衡发生在树的“内部”，如图所示的 **LR** 情况

{% img center /images/AVL_LR.bmp %}

这种不平衡无法通过单旋转来解决，这个时候，我们把上图所示的这棵树可以视为由三个节点( **K3,K1,K2** )和四棵子树(框起来的)构成，像下面这样

{% img center /images/AVL_LR_ABS.bmp 557 382 %}

这种情况下，**节点$\alpha$** 是 **K3**，仔细观察我们发现，无论是以 **K1** 作为根节点还是以 **K3** 作为根节点都会发现不能使树恢复平衡，我们只有以 **K2** 作为新的根节点，其实和 **LL** 有点类似，我们都是把过深的节点以某种方式往上提了提，使树达到平衡，其实，双旋转可以通过两次单旋转来实现的(代码中便是这么做的)，第一次在 **K1** 和 **K2** 之间旋转，第二次在 **K2** 和 **K3** 之间旋转，**只要确定了三个节点的位置，四棵子树的位置根据大小关系也就唯一确定了**，于是我们得到了如下旋转之后的树

{% img center /images/AVL_LR_REC.bmp 533 350%}

这次旋转

-   使 **K2** 的左孩子成为 **K1** 的右孩子
-   使 **K2** 的右孩子成为 **K3** 的左孩子
-   使 **K2** 成为根节点，并且 **K1** 作为它的左孩子，**K3** 作为它的右孩子

通过上述操作，我们对相应的指针做调整，旋转是为了维持树的平衡，对指针的调整是为了保证节点间的大小关系使整棵树依然是二叉查找树，上述过程的实现代码如下

```C
/**********************************
 *
 *		    K3					K2
 *		   /  \				      /    \
 *		  /    \			     /      \
 *		 K1     D			    K1      K3
 *		/  \			 	   / \	    / \	
 *	       /    \           --------->        /   \	   /   \
 *	      A     K2			   	 A    C   B     D
 *	  	   /  \
 *      	  /    \
 *		 C	B
 *                        		       ___    
 *			\                        /|
 *			 \                      / |
 *			  \		       /
 *			   \ |		      /
 *			 ___\|		     /
 *
 *				   K3 
 *				  /  \
 *			 	 /    \
 *				K2     D
 *			       /  \
 *			      /    \
 *			     K1     B
 *			    /  \
 *			   /    \
 *			  A      C
 *
 * 对于上图所示的情况: K3 的左子树( K1 )的右子树( K2 )因为插入了新的
 * 节点 B或C ( C 和 B 两棵子树其中有一棵为空，另一棵不为空的便是新插
 * 入的，画两棵为了体现一般性 )而导致不平衡，属于双旋转的情况，需要
 * 调整的是 K3( 最深的需要调整的节点)，该函数接收 K3 ,进行图示的双旋转
 * ，然后调整对应的树高，最后返回新的根节点
 * 
 * *********************************/
static Position DoubleRotateWithLeft( Position K3 )
{
	/**在 K1 和 K2 之间旋转**/
	K3->Left = SingleRotateWithRight( K3->Left );

	/**在 K3 和 K2 之间旋转**/
	return SingleRotateWithLeft( K3 );
}
```

相应地，**RL** 情况下的双旋转如下

```C
static Position DoubleRotateWithRight( Position K3 )
{
	K3->Right = SingleRotateWithLeft( K3->Right );

	return SingleRotateWithRight( K3 );
}
```

其实对**AVL**树的操作主要就是这两种旋转，如果上述的叙述还是让你不明白的话，这里推荐两个可视化数据结构的站点，[可视化AVL树](https://www.cs.usfca.edu/~galles/visualization/AVLtree.html)和[可视化算法](http://visualgo.net/bst.html)，在这里你可以看到插入，删除时动态的调整过程。

OK，现在两个旋转搞定了之后，我们可以完成插入操作了，大体操作和二叉查找树的插入一样，但是多的操作是插入之后的调整操作，根据节点中的高度信息，我们可以唯一确定具体改采取什么旋转，然后执行对应的旋转，之后更新高度信息，此次插入操作便完成了。

```C
/**插入节点**/
AvlTree Insert( ElementType X, AvlTree T )
{
	if( T == NULL )
	{
		/*创建新的节点返回单节点树**/
		T = malloc( sizeof( struct AvlNode ) );
		if( T == NULL )
			printf("Out of space!!!\n");	
		else
		{
			T->Element = X;
			T->Height = 0;
			T->Left = T->Right = NULL;
		}
	}
	else
	{
		if( X < T->Element )
		{
			T->Left = Insert( X, T->Left );
			if( Height( T->Left ) - Height( T->Right ) == 2 )
			{
				/**此次插入导致了不平衡，需要进行旋转**/
				if( X < T->Left->Element )
					T = SingleRotateWithLeft( T );
				else
					T = DoubleRotateWithLeft( T );
			}
		}
		else if( X > T->Element )
		{
			T->Right = Insert( X, T->Right );
			if( Height( T->Right ) - Height( T->Left ) == 2)
			{
				/**此次插入导致了不平衡，需要进行旋转**/
				if( X > T->Right->Element )
					T = SingleRotateWithRight( T );
				else
					T = DoubleRotateWithRight( T );
			}
		}
		else
			/**要插入的节点已经存在，什么都不做**/
			;

	}
	/**更新树高**/
	T->Height = Max( Height( T->Left ), Height( T->Right ) ) + 1;

	return T;
}
```

### 删除

删除操作和插入操作是类似的思路，在每次删除之后需要考察树的平衡性，需要的话进行调整，在上一篇博客[二叉查找树](http://hengyicai.github.io/blog/2015/02/22/er-cha-cha-zhao-shu/)中，对于删除有两个孩子的 **节点A** 的时候，我们先用 **它的右子树中最小的节点B** 代替 **节点A**，然后再递归删除那个 **最小的节点B**，这个 **节点B** 其实就是中序遍历时 **节点A** 的后继，我们实际删除的节点其实是那个 **节点B** , 回想本文开始提到的 **活跃节点**，这里 **活跃节点** 是 **实际被删除的节点的父节点**，**而节点高度可能发生变化的节点也都是在活跃节点通往根节点的路径上的节点**，每次删除之后，我们只要沿着这条路径依次向上调整即可。

删除操作的调整和插入操作的调整的不同之处在于： **插入之后，我们最多只需要调整两次就可以使树恢复平衡，要么是单旋转(作为一次调整)，要么是双旋转(作为两次调整);但是删除之后，我们可能做多次调整，可能做了一次单旋转之后，还需要再做一次双旋转或单旋转，原因在于插入之后，插入前的子树和插入后的子树的高度是相同的，而删除之后，删除前的子树和删除后的子树的高度可能是不同的**。下面的三幅图说明了删除操作对子树高度的改变。

{% img center /images/1.gif %}

在上图中，可以看到，原先节点50的右子树高度为3，我们现在删除节点80，下图是删除之后对节点75单旋转之后的情况

{% img center /images/2.gif %}

可以看到，对节点75进行旋转之后，节点50的右子树变矮了，这个在插入的时候是不可能的，你可以想一下为什么。

{% img center /images/3.gif %}

正如上图所示，这个时候，根节点50不平衡了，于是我们需要进行第二次旋转，以上就是删除操作比插入操作略微麻烦的原因，但是**我们只要沿着活跃点到根节点的路径，一路向上进行调整，便可以使树重新恢复平衡**。

以下是删除的具体实现

```C
/**删除节点值为 X 的节点**/
AvlTree Delete( ElementType X, AvlTree T )
{
	Position TmpCell;

	if( T == NULL )
	{
		printf("Element not found!!!\n");
		return NULL;
	}
	else if( X < T->Element )
		/**要删除的节点在左树中，在左树中递归删除**/
		T->Left = Delete( X, T->Left );
	else if( X > T->Element )
		/**要删除的节点在右树中，在右树中递归删除**/
		T->Right = Delete( X, T->Right );
	else
	{
		/**要删除的节点有两个孩子**/
		if( T->Left && T->Right )
		{
			TmpCell = FindMin( T->Right );
			T->Element = TmpCell->Element;
			T->Right = Delete( T->Element, T->Right );
		}
		else if( ( T->Left == NULL ) || ( T->Right == NULL ) )
		{
			TmpCell = T->Left ? T->Left : T->Right;

			/**要删除的节点是叶子节点**/
			if( TmpCell == NULL )
			{
				TmpCell = T;
				T = NULL;
			}	

			/**要删除的节点有一个或0个孩子**/
			else
			{
				/**儿子取代父亲的位置**/
				T = TmpCell;
			}

			free( TmpCell );
		}
	}

	if( T == NULL )
		return NULL;

	T->Height = Max( Height( T->Left ),Height( T->Right ) ) + 1;

	/**重新调整，使树平衡**/

	int HeiDiff = Height( T->Left ) - Height( T->Right );

	if( HeiDiff == 2 )
	{
		if( Height( T->Left->Left ) >= Height( T->Left->Right ) )
			/**左左情况**/
			return SingleRotateWithLeft( T );
		else
			/**左右情况**/
			return DoubleRotateWithLeft( T );
	}
	else if( HeiDiff == -2 )
	{
		if( Height( T->Right->Right ) >= Height( T->Right->Left ) )
			/**右右情况**/
			return SingleRotateWithRight( T );
		else
			/**右左情况**/
			return DoubleRotateWithRight( T );
	}

	return T;
}
```

AVL树的其他操作比较简单，在上篇博客[二叉查找树](http://hengyicai.github.io/blog/2015/02/22/er-cha-cha-zhao-shu/)中已经有过说明。关于二叉查找树和AVL树的完整代码可以在[这里](https://github.com/hengyicai/AVL_BST)下载。


## 进一步讨论

对于二叉查找树来说，它的各项操作所需要的时间取决于它这棵树的深度，而AVL树则可以保证树的深度为$O(\log{N})$，而普通的二叉查找树则不能保证这一点，考虑下面最坏的情况，向一棵树中插入**1千万**个按照大小排好序的数，对于普通的二叉查找树来说，插入之后树的深度几乎也为**1千万**，而对于AVL树而言，插入之后树的深度只有**23**(我试过1亿个节点，但由于程序中递归的使用，我的电脑直接挂了，但理论估计这个时候树的深度在**25**到**30**之间)，虽然AVL树的操作稍微麻烦了些，但这种性能的提升还是非常值得的。

## 参考文献

[维斯(作者),冯舜玺(译者) 《数据结构与算法分析》](http://www.amazon.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-C%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0-%E7%BB%B4%E6%96%AF/dp/B002WC7NGS)

[http://www.mathcs.emory.edu/~cheung/Courses/323/Syllabus/Trees/AVL-delete.html](http://www.mathcs.emory.edu/~cheung/Courses/323/Syllabus/Trees/AVL-delete.html) 










